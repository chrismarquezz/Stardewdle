@tailwind base;
@tailwind components;
@tailwind utilities;

@font-face {
  font-family: 'Stardew';
  src: url('../public/fonts/StardewValley.ttf') format('truetype');
  font-display: swap;
}

/* Base styles for HTML/Body to ensure full height */
html, body, #root {
  height: 100%;
  margin: 0;
  padding: 0;
}

/* Media query for mobile portrait devices */
@media (max-width: 767px) and (orientation: portrait) {

  /* GameBox Container Rotation and Absolute Positioning */
  .gamebox-rotate-mobile {
    /* Position GameBox absolutely within its parent (Game.js's scaled content div) */
    position: absolute;
    top: 50%; /* Center vertically within parent */
    left: 50%; /* Center horizontally within parent */
    
    /* Translate it by -50% of its own width/height *after* rotation, then rotate.
       GameBox original: 1600px wide, 800px high.
       When rotated -90deg, its effective bounding box becomes 800px wide, 1600px high.
       `translate(-50%, -50%)` effectively moves its top-left corner by half its *new* width and height.
    */
    transform: translate(-50%, -50%) rotate(-90deg);
    transform-origin: center center; /* Rotate around its center */

    /* IMPORTANT: Override the original flex layout that was on GameBox for desktop */
    display: block !important; /* Change from flex to block to allow absolute positioning to work predictably */
    flex-direction: initial !important; /* Reset flex-direction */
    justify-content: initial !important; /* Reset justify-content */
    padding-left: 0 !important; /* Reset padding from original styles */
    margin-top: 0 !important; /* Reset margin from original styles */
  }

  /* Elements inside GameBox that need to counter-rotate */
  .content-counter-rotate-mobile {
    transform: rotate(90deg);
    transform-origin: center center;
    /* Reset any positional properties that might interfere with layout post-rotation.
       This is critical as original margins/paddings might now apply to a rotated axis. */
    margin: 0 !important;
    padding: 0 !important;
    /* If an element had `absolute` positioning, its `top/left/bottom/right`
       values will now be relative to the rotated parent's coordinate system.
       These might need to be adjusted or set explicitly here if issues arise. */
  }

  /* --- Specific Adjustments for Layout within GameBox after rotations --- */
  /* These are more complex and require fine-tuning based on visual results. */
  /* They might need `position: absolute` and precise `top`/`left` adjustments
     within the now rotated `GameBox`. */

  /* Example: Adjusting CropGrid's position within the rotated GameBox */
  /* Assuming CropGrid is the first major visual element */
  .gamebox-rotate-mobile .grid.grid-cols-4.gap-2.mr-10 { /* Targeting CropGrid's root div */
      position: absolute;
      top: 50%; /* Center it vertically in the rotated GameBox */
      left: 20%; /* Example: Position towards the "left" of the rotated GameBox */
      transform: translate(-50%, -50%) rotate(90deg); /* Counter-rotate and center */
      /* The `mr-10` on CropGrid might need to be overridden if it causes issues */
      margin-right: 0 !important;
  }

  /* Example: Adjusting the "Right Side" container's position */
  .gamebox-rotate-mobile .flex.flex-col.align-center.w-full.place-items-center {
      position: absolute;
      top: 50%; /* Center it vertically in the rotated GameBox */
      right: 15%; /* Example: Position towards the "right" of the rotated GameBox */
      transform: translate(50%, -50%) rotate(90deg); /* Counter-rotate and center */
      /* Override existing Tailwind margins */
      margin-right: 0 !important;
      margin-top: 0 !important;
      /* You might need to set explicit width for this container if its w-full breaks */
      width: 700px; /* Adjust as needed */
  }

  /* Example: Adjusting Mute/Unmute Button */
  .gamebox-rotate-mobile .absolute.bottom-16.-right-11.w-\[30px\].h-\[30px\].clickable.z-10 {
    /* These buttons are already absolutely positioned. Their top/left/bottom/right
       values are now relative to the *rotated* GameBox.
       We need to give them new values that make sense in the new orientation. */
    top: 50px; /* Example new Y-position in rotated frame */
    left: 50px; /* Example new X-position in rotated frame */
    bottom: auto !important; /* Clear original bottom */
    right: auto !important; /* Clear original right */
    transform: rotate(90deg); /* Just counter-rotate */
  }

  /* Example: Adjusting Help Button */
  .gamebox-rotate-mobile .absolute.bottom-1.-right-14.w-\[50px\].h-\[50px\].group.clickable.z-10 {
    top: 50px; /* Example new Y-position */
    right: 50px; /* Example new X-position */
    bottom: auto !important;
    left: auto !important;
    transform: rotate(90deg); /* Just counter-rotate */
  }
}